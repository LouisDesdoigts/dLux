{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\\(\\partial\\) Lux Docs \u2202Lux \u2202Lux: Taking derivatives through Light - 'Optical systems as a Neural Network' Contributors Louis Desdoigts , Benjamin Pope , Jordan Dennis Installation The easiest way to install is from PyPI: just use pip install dLux To install from source: clone this git repo, enter the directory, and run pip install . Use We are currently building examples and documentation! We currently have two tutrial notebooks, showing the basics of how to optimise simple and more complex models here . Please note that this software is still under development and so is subject to change! History \u2202Lux is a full from-scratch rewrite of the ideas morphine , which is a fork of the popular optical simulation package ' poppy ' using the autodiff library Google Jax to do derivatives . We have built it from the ground up in equinox , a powerful object-oriented library in Jax, to best take advantage of new features and permit easy development and integration with neural networks. The Basics The goal of \\(\\partial\\) Lux is to revolutionalise the way in which optical modelling is approached. We believe that the mathematical symmetry betweeen neural networks and optical systems means that the current state of optical modelling is stuck in the old ways, and that differentiable optical models that harness the power of automatic differention is imperative to pushing the bounds of what is possible. For the uninitiated, automatic differentaion (auto-diff) is the mathematical tool that underpins the revolution in machine learning. The power of auto-diff ultimately lies in its ability to divorce the time it takes to optimise a model from the number of parameters being optimised in that model. This represents a fundamental paradigm shift in the way in which problems can be approached. Much time and effort has been focused in the past on making problems in optical modelling computationally tracatable, forcing compromises on what is learnt. This is no longer the case, directly optimising physics-based forwards models with millions of parameters is not only possible, but practical without requiring vast computation power. We have built \\(\\partial\\) Lux using Jax - googles numpy-like auto-diff library and Equinox. Together these two packages allow us to build an optical simulator that takes full advantage of the bleeding edge of computer science. For example each individual PSF calcualtion is natively performed in parallel across however many computational resources are available without any work from the end-user. Similarly these models can be compiled at run time into XLA without. TBC... Package Overview \\(\\partial\\) Lux has been built to be as simple and easy as possible for end-users, without abstracting them away from the underlying computations. There are two main types of classes that form the foundation of \\(\\partial\\) Lux, the OpticalSystem() and the layers. In order to construct a model of an optical system one simply defines the series of operations/transforms that is performed on the input wavefront in a list, which is passed as an argument to the OpticalSystem() class. Each transformation or operation is a single 'layer' in that list. For a very simple optical a typical list of layers would look something like this: layers = [ CreateWavefront(wf_npix, wf_size), TiltWavefront(), CircualrAperture(wf_npix), NormaliseWavefront(), MFT(det_npix, fl, det_pixsize) ] This list of layers can then be turned into an optical system -> OpticalSystem(layers) . We now have a fully differentiable optical model! The OpticalSystem() is the main class that we will interact with and does most of the heavy lifting, so lets a take a detailed look at what this class does. The OpticalSystem() object! The OpticalSystem object is the primary object of dLux, so here is a quick overview. dLux curently does not check that inputs are correctly shaped/formatted in order to making things work appropriately (under development) Inputs: layers: list, required A list of layers that defines the tranformaitons and operations of the system (typically optical) wavels: ndarray, optional An array of wavelengths in meters to simulate The shape must be 1d - stellar spectrums are controlled through the weights parameter No default value is set if not provided and this will throw an error if you try to call functions that depend on this parameter It is left as optional so that functions that allow wavelength input can be called on objects without having to pre-input wavelengths positions: ndarray, optional An array of (x,y) stellar positions in units of radians, measured as deivation of the optical axis. Its input shape should be (Nstars, 2), defining an x, y position for each star. If not provided, the value defaults to (0, 0) - on axis fluxes: ndarray, optional An array of stellar fluxes, its length must match the positions inputs size to work properly Theoretically this has arbitrary units, but we think of it as photons Defaults to 1 (ie, returning a unitary flux psf if not specified) weights: ndarray, optional An array of stellar spectral weights (arb units) This can take multiple shapes Default is to weight all wavelengths equally (top-hat) If a 1d array is provided this is applied to all stars, shape (Nwavels) if a 2d array is provided each is applied to each individual star, shape (Nstars, Nwavels) Note the inputs values are always normalised and will not directly change total output flux (inderectly it can change it by weighting more flux to wavelengths with more aperture losses, for example) dithers: ndarray, optional An arary of (x, y) positional dithers in units of radians Its input shape should be (Nims, 2), defining the (x,y) dither for each image if not provided, defualts to no-dither detector_layers: list, optional A second list of layer objects designed to allow processing of psfs, rather than wavefronts It is applied to each image after psfs have been approraitely weighted and summed Functions: call () Primary call function applying all parameters of the scene object through the systems - Takes no inputs, returning a image, or array of images - The primary function designed to apply all of the inputs of the class in order to generate the appropriate output images - Automatically maps the psf calcualtion over both wavelength and input position for highly efficient calculations - It takes no inputs as to allow for easier coherent optimsation of the whole system propagate_mono(wavel): Propagates a single monochromatic wavelength through only the layers list - Inputs: - wavel (float): The wavelength in meters to be modelled through the system - offset (ndarray, optional): the (x,y) offest from the optical axis in radians - Returns: A sigle monochromatic PSF propagate_single(wavels) Propagataes a single broadband stellar source through the layers list - Inputs: - wavels (ndarray): The wavelengths in meters to be modelled through the system - offset (ndarray, optional): the (x,y) offest from the optical axis in radians - weights (ndarray, optional): the realative weights of each wavelength, - No normalisation is applied to the weights to allow user flexibility - Unitary weights will output a total sum of 1 - Returns: A single broadband PSF debug_prop(wavels) Propagataes a single wavelength through while storing the intermediary value of the wavefront and pixelscale between each operation. This is designed to help build and debug unexpected behaviour. It is functionally a mirror of propagate_mono() that stored intermediary values/arrays - Inputs: - wavels (ndarray): The wavelengths in meters to be modelled through the system - offset (ndarray, optional): the (x,y) offest from the optical axis in radians - Returns: [A single monochromatic PSF, intermediate wavefront, intermediate pixelscales]","title":"Home"},{"location":"#lux","text":"\u2202Lux: Taking derivatives through Light - 'Optical systems as a Neural Network'","title":"\u2202Lux"},{"location":"#contributors","text":"Louis Desdoigts , Benjamin Pope , Jordan Dennis","title":"Contributors"},{"location":"#installation","text":"The easiest way to install is from PyPI: just use pip install dLux To install from source: clone this git repo, enter the directory, and run pip install .","title":"Installation"},{"location":"#use","text":"We are currently building examples and documentation! We currently have two tutrial notebooks, showing the basics of how to optimise simple and more complex models here . Please note that this software is still under development and so is subject to change!","title":"Use"},{"location":"#history","text":"\u2202Lux is a full from-scratch rewrite of the ideas morphine , which is a fork of the popular optical simulation package ' poppy ' using the autodiff library Google Jax to do derivatives . We have built it from the ground up in equinox , a powerful object-oriented library in Jax, to best take advantage of new features and permit easy development and integration with neural networks.","title":"History"},{"location":"#the-basics","text":"The goal of \\(\\partial\\) Lux is to revolutionalise the way in which optical modelling is approached. We believe that the mathematical symmetry betweeen neural networks and optical systems means that the current state of optical modelling is stuck in the old ways, and that differentiable optical models that harness the power of automatic differention is imperative to pushing the bounds of what is possible. For the uninitiated, automatic differentaion (auto-diff) is the mathematical tool that underpins the revolution in machine learning. The power of auto-diff ultimately lies in its ability to divorce the time it takes to optimise a model from the number of parameters being optimised in that model. This represents a fundamental paradigm shift in the way in which problems can be approached. Much time and effort has been focused in the past on making problems in optical modelling computationally tracatable, forcing compromises on what is learnt. This is no longer the case, directly optimising physics-based forwards models with millions of parameters is not only possible, but practical without requiring vast computation power. We have built \\(\\partial\\) Lux using Jax - googles numpy-like auto-diff library and Equinox. Together these two packages allow us to build an optical simulator that takes full advantage of the bleeding edge of computer science. For example each individual PSF calcualtion is natively performed in parallel across however many computational resources are available without any work from the end-user. Similarly these models can be compiled at run time into XLA without. TBC...","title":"The Basics"},{"location":"#package-overview","text":"\\(\\partial\\) Lux has been built to be as simple and easy as possible for end-users, without abstracting them away from the underlying computations. There are two main types of classes that form the foundation of \\(\\partial\\) Lux, the OpticalSystem() and the layers. In order to construct a model of an optical system one simply defines the series of operations/transforms that is performed on the input wavefront in a list, which is passed as an argument to the OpticalSystem() class. Each transformation or operation is a single 'layer' in that list. For a very simple optical a typical list of layers would look something like this: layers = [ CreateWavefront(wf_npix, wf_size), TiltWavefront(), CircualrAperture(wf_npix), NormaliseWavefront(), MFT(det_npix, fl, det_pixsize) ] This list of layers can then be turned into an optical system -> OpticalSystem(layers) . We now have a fully differentiable optical model! The OpticalSystem() is the main class that we will interact with and does most of the heavy lifting, so lets a take a detailed look at what this class does.","title":"Package Overview"},{"location":"#the-opticalsystem-object","text":"The OpticalSystem object is the primary object of dLux, so here is a quick overview. dLux curently does not check that inputs are correctly shaped/formatted in order to making things work appropriately (under development)","title":"The OpticalSystem() object!"},{"location":"#inputs","text":"","title":"Inputs:"},{"location":"#layers-list-required","text":"A list of layers that defines the tranformaitons and operations of the system (typically optical)","title":"layers: list, required"},{"location":"#wavels-ndarray-optional","text":"An array of wavelengths in meters to simulate The shape must be 1d - stellar spectrums are controlled through the weights parameter No default value is set if not provided and this will throw an error if you try to call functions that depend on this parameter It is left as optional so that functions that allow wavelength input can be called on objects without having to pre-input wavelengths","title":"wavels: ndarray, optional"},{"location":"#positions-ndarray-optional","text":"An array of (x,y) stellar positions in units of radians, measured as deivation of the optical axis. Its input shape should be (Nstars, 2), defining an x, y position for each star. If not provided, the value defaults to (0, 0) - on axis","title":"positions: ndarray, optional"},{"location":"#fluxes-ndarray-optional","text":"An array of stellar fluxes, its length must match the positions inputs size to work properly Theoretically this has arbitrary units, but we think of it as photons Defaults to 1 (ie, returning a unitary flux psf if not specified)","title":"fluxes: ndarray, optional"},{"location":"#weights-ndarray-optional","text":"An array of stellar spectral weights (arb units) This can take multiple shapes Default is to weight all wavelengths equally (top-hat) If a 1d array is provided this is applied to all stars, shape (Nwavels) if a 2d array is provided each is applied to each individual star, shape (Nstars, Nwavels) Note the inputs values are always normalised and will not directly change total output flux (inderectly it can change it by weighting more flux to wavelengths with more aperture losses, for example)","title":"weights: ndarray, optional"},{"location":"#dithers-ndarray-optional","text":"An arary of (x, y) positional dithers in units of radians Its input shape should be (Nims, 2), defining the (x,y) dither for each image if not provided, defualts to no-dither","title":"dithers: ndarray, optional"},{"location":"#detector_layers-list-optional","text":"A second list of layer objects designed to allow processing of psfs, rather than wavefronts It is applied to each image after psfs have been approraitely weighted and summed","title":"detector_layers: list, optional"},{"location":"#functions","text":"","title":"Functions:"},{"location":"#call","text":"Primary call function applying all parameters of the scene object through the systems - Takes no inputs, returning a image, or array of images - The primary function designed to apply all of the inputs of the class in order to generate the appropriate output images - Automatically maps the psf calcualtion over both wavelength and input position for highly efficient calculations - It takes no inputs as to allow for easier coherent optimsation of the whole system","title":"call()"},{"location":"#propagate_monowavel","text":"Propagates a single monochromatic wavelength through only the layers list - Inputs: - wavel (float): The wavelength in meters to be modelled through the system - offset (ndarray, optional): the (x,y) offest from the optical axis in radians - Returns: A sigle monochromatic PSF","title":"propagate_mono(wavel):"},{"location":"#propagate_singlewavels","text":"Propagataes a single broadband stellar source through the layers list - Inputs: - wavels (ndarray): The wavelengths in meters to be modelled through the system - offset (ndarray, optional): the (x,y) offest from the optical axis in radians - weights (ndarray, optional): the realative weights of each wavelength, - No normalisation is applied to the weights to allow user flexibility - Unitary weights will output a total sum of 1 - Returns: A single broadband PSF","title":"propagate_single(wavels)"},{"location":"#debug_propwavels","text":"Propagataes a single wavelength through while storing the intermediary value of the wavefront and pixelscale between each operation. This is designed to help build and debug unexpected behaviour. It is functionally a mirror of propagate_mono() that stored intermediary values/arrays - Inputs: - wavels (ndarray): The wavelengths in meters to be modelled through the system - offset (ndarray, optional): the (x,y) offest from the optical axis in radians - Returns: [A single monochromatic PSF, intermediate wavefront, intermediate pixelscales]","title":"debug_prop(wavels)"},{"location":"developer_documentation/propagators/propagator/","text":"Bases: eqx . Module An abstract class indicating a spatial transfromation of the Wavefront . This is a separate class because it allows us to take gradients with respect to the fields of the propagator and hence optimise distances ect. Attributes: Name Type Description inverse bool True if the inverse algorithm is to be used else false. tilt bool True if the offset of the Wavefront is to be considered otherwise false. inverse = bool ( inverse ) instance-attribute __init__ ( inverse = False ) Parameters: Name Type Description Default inverse bool True if the inverse algorithm is to be used else False. False is_inverse () Returns inverse : bool Whether or not the inverse algorithm is to be used.","title":"Propagator"},{"location":"developer_documentation/propagators/propagator/#dLux.propagators.Propagator.inverse","text":"","title":"inverse"},{"location":"developer_documentation/propagators/propagator/#dLux.propagators.Propagator.__init__","text":"Parameters: Name Type Description Default inverse bool True if the inverse algorithm is to be used else False. False","title":"__init__()"},{"location":"developer_documentation/propagators/propagator/#dLux.propagators.Propagator.is_inverse","text":"","title":"is_inverse()"},{"location":"developer_documentation/propagators/propagator/#dLux.propagators.Propagator.is_inverse--returns","text":"inverse : bool Whether or not the inverse algorithm is to be used.","title":"Returns"},{"location":"developer_documentation/propagators/fixed_sampling/angular_fft/","text":"Bases: FixedSamplingPropagator Propagation of an Angular wavefront by a non-paraxial fast Fourier transform. __init__ ( inverse = False ) Parameters: Name Type Description Default inverse bool True if the inverse algorithm is to be used else False False get_pixel_scale_out ( wavefront ) Calculate the pixel scale in the output plane in units of radians per pixel. Parameters: Name Type Description Default wavefront Wavefront The wavefront that is getting propagated. required Overrides FixedSamplingPropagator::get_pixel_scale_out Returns: Name Type Description pixel_scale float The pixel scale in the ouptut plane in units of radians per pixel.","title":"AngularFFT"},{"location":"developer_documentation/propagators/fixed_sampling/angular_fft/#dLux.propagators.AngularFFT.__init__","text":"Parameters: Name Type Description Default inverse bool True if the inverse algorithm is to be used else False False","title":"__init__()"},{"location":"developer_documentation/propagators/fixed_sampling/angular_fft/#dLux.propagators.AngularFFT.get_pixel_scale_out","text":"Calculate the pixel scale in the output plane in units of radians per pixel. Parameters: Name Type Description Default wavefront Wavefront The wavefront that is getting propagated. required","title":"get_pixel_scale_out()"},{"location":"developer_documentation/propagators/fixed_sampling/angular_fft/#dLux.propagators.AngularFFT.get_pixel_scale_out--overrides","text":"FixedSamplingPropagator::get_pixel_scale_out Returns: Name Type Description pixel_scale float The pixel scale in the ouptut plane in units of radians per pixel.","title":"Overrides"},{"location":"developer_documentation/propagators/fixed_sampling/fixed_sampling_propagator/","text":"Bases: Propagator A propagator that samples the electric field in the output plane at the rate of one fringe per pixel where a fringe is a wavelength divided by the apperture diameter. These propagators are implemented using the numpy.fft sub-sub-package and cannot be modified elsewise. __call__ ( parameters ) Propagate a Wavefront to the focal_plane of the lens or mirror. Parameters: Name Type Description Default parameters dict A dictionary that must contain a \"Wavefront\" key. required Returns parameters : dict A dictionary with the updated \"Wavefront\" key; value get_pixel_scale_out ( wavefront ) The pixel scale in the output plane. Calculated based on the wavefront and the units of the wavefront. Parameters: Name Type Description Default wavefront Wavefront The wavefront that is getting propagated. required Returns pixel_scale : float, meters/pixel or radians/pixel The pixel scale in the output plane in units of meters (radians) per pixel.","title":"Fixed Sampling Propagator"},{"location":"developer_documentation/propagators/fixed_sampling/fixed_sampling_propagator/#dLux.propagators.FixedSamplingPropagator.__call__","text":"Propagate a Wavefront to the focal_plane of the lens or mirror. Parameters: Name Type Description Default parameters dict A dictionary that must contain a \"Wavefront\" key. required","title":"__call__()"},{"location":"developer_documentation/propagators/fixed_sampling/fixed_sampling_propagator/#dLux.propagators.FixedSamplingPropagator.__call__--returns","text":"parameters : dict A dictionary with the updated \"Wavefront\" key; value","title":"Returns"},{"location":"developer_documentation/propagators/fixed_sampling/fixed_sampling_propagator/#dLux.propagators.FixedSamplingPropagator.get_pixel_scale_out","text":"The pixel scale in the output plane. Calculated based on the wavefront and the units of the wavefront. Parameters: Name Type Description Default wavefront Wavefront The wavefront that is getting propagated. required","title":"get_pixel_scale_out()"},{"location":"developer_documentation/propagators/fixed_sampling/fixed_sampling_propagator/#dLux.propagators.FixedSamplingPropagator.get_pixel_scale_out--returns","text":"pixel_scale : float, meters/pixel or radians/pixel The pixel scale in the output plane in units of meters (radians) per pixel.","title":"Returns"},{"location":"developer_documentation/propagators/fixed_sampling/physical_fft/","text":"Bases: FixedSamplingPropagator Perfrom an FFT propagation on a PhysicalWavefront . This is the same as the MFT however it samples 1 diffraction fringe per pixel. Attributes: Name Type Description focal_length float , meters The focal length of the lens or mirror. focal_length = focal_length instance-attribute __init__ ( focal_length , inverse = False , tilt = False ) Parameters: Name Type Description Default focal_length float , meters The focal length of the lens or mirror that is getting propagated away from. required inverse bool Propagation direction. True for forwards and False for backwards. False tilt bool Whether or not to use the tilt of the Wavefront . True if the tilt is to be accounted for. False Returns: Name Type Description propagator Propagator A Propagator object representing the optical path from the mirror to the focal plane. get_focal_length () Accessor for the focal length. Returns: Name Type Description focal_length float , meters The focal length of the lens or mirror. get_pixel_scale_out ( wavefront ) The pixel scale in the focal plane Parameters: Name Type Description Default wavefront Wavefront The Wavefront that is propagting. required Returns: Name Type Description pixel_scale_out float , meters The pixel scale.","title":"PhysicalFFT"},{"location":"developer_documentation/propagators/fixed_sampling/physical_fft/#dLux.propagators.PhysicalFFT.focal_length","text":"","title":"focal_length"},{"location":"developer_documentation/propagators/fixed_sampling/physical_fft/#dLux.propagators.PhysicalFFT.__init__","text":"Parameters: Name Type Description Default focal_length float , meters The focal length of the lens or mirror that is getting propagated away from. required inverse bool Propagation direction. True for forwards and False for backwards. False tilt bool Whether or not to use the tilt of the Wavefront . True if the tilt is to be accounted for. False Returns: Name Type Description propagator Propagator A Propagator object representing the optical path from the mirror to the focal plane.","title":"__init__()"},{"location":"developer_documentation/propagators/fixed_sampling/physical_fft/#dLux.propagators.PhysicalFFT.get_focal_length","text":"Accessor for the focal length. Returns: Name Type Description focal_length float , meters The focal length of the lens or mirror.","title":"get_focal_length()"},{"location":"developer_documentation/propagators/fixed_sampling/physical_fft/#dLux.propagators.PhysicalFFT.get_pixel_scale_out","text":"The pixel scale in the focal plane Parameters: Name Type Description Default wavefront Wavefront The Wavefront that is propagting. required Returns: Name Type Description pixel_scale_out float , meters The pixel scale.","title":"get_pixel_scale_out()"},{"location":"developer_documentation/propagators/variable_sampling/angular_fresnel/","text":"Bases: Propagator Propagates an AngularWavefront in the Fresnel approximation.","title":"AngularFresnel"},{"location":"developer_documentation/propagators/variable_sampling/angular_mft/","text":"Bases: VariableSamplingPropagator Propagation of an AngularWavefront by a paraxial matrix fourier transform. __init__ ( pixel_scale_out , pixels_out , inverse = False , tilt = False ) Parameters: Name Type Description Default pixel_scale_out float , radians The scale of the pixels in the output plane in radians per pixel. Pixel scales have units of meters/pixel in pupil planes and units of radians/pixel in focal planes. required pixels_out int The number of pixels in the output plane. required inverse bool True if the inverse transformation is to be applied else False. False tilt bool True if the tilt of the wavefront is to be considered else False. False get_pixel_offsets ( wavefront ) The offset(s) in units of pixels. Parameters: Name Type Description Default wavefront Wavefront The wavefront to propagate. required Returns: Type Description Array The offset from the x and y plane in units of pixels. number_of_fringes ( wavefront ) Determines the number of diffraction fringes in the plane of propagation. Parameters wavefront : Wavefront The Wavefront that is getting propagated. Returns : float The floating point number of diffraction fringes in the plane of propagation.","title":"AngularMFT"},{"location":"developer_documentation/propagators/variable_sampling/angular_mft/#dLux.propagators.AngularMFT.__init__","text":"Parameters: Name Type Description Default pixel_scale_out float , radians The scale of the pixels in the output plane in radians per pixel. Pixel scales have units of meters/pixel in pupil planes and units of radians/pixel in focal planes. required pixels_out int The number of pixels in the output plane. required inverse bool True if the inverse transformation is to be applied else False. False tilt bool True if the tilt of the wavefront is to be considered else False. False","title":"__init__()"},{"location":"developer_documentation/propagators/variable_sampling/angular_mft/#dLux.propagators.AngularMFT.get_pixel_offsets","text":"The offset(s) in units of pixels. Parameters: Name Type Description Default wavefront Wavefront The wavefront to propagate. required Returns: Type Description Array The offset from the x and y plane in units of pixels.","title":"get_pixel_offsets()"},{"location":"developer_documentation/propagators/variable_sampling/angular_mft/#dLux.propagators.AngularMFT.number_of_fringes","text":"Determines the number of diffraction fringes in the plane of propagation.","title":"number_of_fringes()"},{"location":"developer_documentation/propagators/variable_sampling/angular_mft/#dLux.propagators.AngularMFT.number_of_fringes--parameters","text":"wavefront : Wavefront The Wavefront that is getting propagated.","title":"Parameters"},{"location":"developer_documentation/propagators/variable_sampling/angular_mft/#dLux.propagators.AngularMFT.number_of_fringes--returns","text":": float The floating point number of diffraction fringes in the plane of propagation.","title":"Returns"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/","text":"Bases: VariableSamplingPropagator far-field diffraction based on the Frensel approximation. This implementation approximately conserves flux because the normalisation is based on focal plane MFT normalisation. Attributes: Name Type Description focal_length float , meters The focal length of the lens or mirror in meters. This is a differentiable parameter. focal_shift float , meters The displacement of the plane of propagation from the the focal_length in meters. This is a differentiable parameter. The focal shift is positive if the plane of propagation is beyond the focal length and negative if the plane of propagation is inside the focal length. focal_length = np . asarray ( focal_length ) . astype ( float ) instance-attribute focal_shift = np . asarray ( focal_shift ) . astype ( float ) instance-attribute __init__ ( pixels_out , focal_length , focal_shift , pixel_scale_out , inverse = False , tilt = False ) Parameters: Name Type Description Default focal_length float , meters The focal length of the mirror or the lens. required focal_shift float , meters The distance away from the focal plane to be propagated to. required pixels_out int The number if pixels in the plane of propagation. required pixel_scale_out float , meters The scale of a pixel in the plane of propagation in units of meters per pixel. required inverse bool True if propagating from the plane of propagation and False if propagating to the plane of propagation. False tilt bool True if the tilt of the Wavefront is to be considered. False if the tilt is to be discarded. False get_focal_length () Returns: Name Type Description focal_length float , meters The focal length of the mirror or lens. get_focal_shift () Returns shift : float, meters The shift away from focus of the detector. number_of_fringes ( wavefront ) The number of diffraction fringes in the plane of propagation. Overrides VariableSamplingPropagator : number_of_fringes() Adds somplexity to deal with the near field. Parameters: Name Type Description Default wavefront Wavefront The wavefront that is getting propagated. required Returns: Name Type Description fringes float The number of diffraction fringes visible in the plane of propagation. quadratic_phase ( x_coordinates , y_coordinates , wavelength , distance ) A convinience function for calculating quadratic phase factors Parameters: Name Type Description Default x_coordinates Array The x coordinates of the pixels in meters. This will be different in the plane of propagation and the initial plane. required y_coordinates Array The y coordinates of the pixels in meters. This will be different in the plane of propagation and the initial plane. required wavelength float , meters The wavelength of the wavefront. required distance float , meters The distance that is to be propagated in meters. required Returns: Name Type Description quadratic_phase Array A set of phase factors that are useful in optical calculations.","title":"PhysicalFresnel"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/#dLux.propagators.PhysicalFresnel.focal_length","text":"","title":"focal_length"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/#dLux.propagators.PhysicalFresnel.focal_shift","text":"","title":"focal_shift"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/#dLux.propagators.PhysicalFresnel.__init__","text":"Parameters: Name Type Description Default focal_length float , meters The focal length of the mirror or the lens. required focal_shift float , meters The distance away from the focal plane to be propagated to. required pixels_out int The number if pixels in the plane of propagation. required pixel_scale_out float , meters The scale of a pixel in the plane of propagation in units of meters per pixel. required inverse bool True if propagating from the plane of propagation and False if propagating to the plane of propagation. False tilt bool True if the tilt of the Wavefront is to be considered. False if the tilt is to be discarded. False","title":"__init__()"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/#dLux.propagators.PhysicalFresnel.get_focal_length","text":"Returns: Name Type Description focal_length float , meters The focal length of the mirror or lens.","title":"get_focal_length()"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/#dLux.propagators.PhysicalFresnel.get_focal_shift","text":"","title":"get_focal_shift()"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/#dLux.propagators.PhysicalFresnel.get_focal_shift--returns","text":"shift : float, meters The shift away from focus of the detector.","title":"Returns"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/#dLux.propagators.PhysicalFresnel.number_of_fringes","text":"The number of diffraction fringes in the plane of propagation.","title":"number_of_fringes()"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/#dLux.propagators.PhysicalFresnel.number_of_fringes--overrides","text":"VariableSamplingPropagator : number_of_fringes() Adds somplexity to deal with the near field. Parameters: Name Type Description Default wavefront Wavefront The wavefront that is getting propagated. required Returns: Name Type Description fringes float The number of diffraction fringes visible in the plane of propagation.","title":"Overrides"},{"location":"developer_documentation/propagators/variable_sampling/physical_fresnel/#dLux.propagators.PhysicalFresnel.quadratic_phase","text":"A convinience function for calculating quadratic phase factors Parameters: Name Type Description Default x_coordinates Array The x coordinates of the pixels in meters. This will be different in the plane of propagation and the initial plane. required y_coordinates Array The y coordinates of the pixels in meters. This will be different in the plane of propagation and the initial plane. required wavelength float , meters The wavelength of the wavefront. required distance float , meters The distance that is to be propagated in meters. required Returns: Name Type Description quadratic_phase Array A set of phase factors that are useful in optical calculations.","title":"quadratic_phase()"},{"location":"developer_documentation/propagators/variable_sampling/physical_mft/","text":"Bases: VariableSamplingPropagator Fraunhofer propagation based on the a matrix fourier transfrom with adjustable scaling. Attributes focal_length : float, meters The focal length of the propagation distance. focal_length = np . array ( focal_length ) . astype ( float ) instance-attribute __init__ ( pixels_out , focal_length , pixel_scale_out , inverse = False , tilt = False ) Parameters: Name Type Description Default focal_length float , meters The focal length of the mirror or lens that the Wavefront is propagating away from. required pixels_out int The number of pixels in the output image. required pixel_scale_out float , meters The pixel scale in the output plane. required inverse bool Whether or not the propagation is input plane to output plane or output plane to input plane. The inverse algorithm is used if True is provided. False tilt bool Whether or not to use the propagation is to use the tilt of the wavefront. The tilt is used if True and not if False. False get_focal_length () Accessor for the focal_length. Returns : float, meters The focal length. number_of_fringes ( wavefront ) Determines the number of diffraction fringes in the plane of propagation. Parameters wavefront : Wavefront The Wavefront that is getting propagated. Returns fringes : float The floating point number of diffraction fringes in the plane of propagation.","title":"PhysicalMFT"},{"location":"developer_documentation/propagators/variable_sampling/physical_mft/#dLux.propagators.PhysicalMFT--attributes","text":"focal_length : float, meters The focal length of the propagation distance.","title":"Attributes"},{"location":"developer_documentation/propagators/variable_sampling/physical_mft/#dLux.propagators.PhysicalMFT.focal_length","text":"","title":"focal_length"},{"location":"developer_documentation/propagators/variable_sampling/physical_mft/#dLux.propagators.PhysicalMFT.__init__","text":"Parameters: Name Type Description Default focal_length float , meters The focal length of the mirror or lens that the Wavefront is propagating away from. required pixels_out int The number of pixels in the output image. required pixel_scale_out float , meters The pixel scale in the output plane. required inverse bool Whether or not the propagation is input plane to output plane or output plane to input plane. The inverse algorithm is used if True is provided. False tilt bool Whether or not to use the propagation is to use the tilt of the wavefront. The tilt is used if True and not if False. False","title":"__init__()"},{"location":"developer_documentation/propagators/variable_sampling/physical_mft/#dLux.propagators.PhysicalMFT.get_focal_length","text":"Accessor for the focal_length.","title":"get_focal_length()"},{"location":"developer_documentation/propagators/variable_sampling/physical_mft/#dLux.propagators.PhysicalMFT.get_focal_length--returns","text":": float, meters The focal length.","title":"Returns"},{"location":"developer_documentation/propagators/variable_sampling/physical_mft/#dLux.propagators.PhysicalMFT.number_of_fringes","text":"Determines the number of diffraction fringes in the plane of propagation.","title":"number_of_fringes()"},{"location":"developer_documentation/propagators/variable_sampling/physical_mft/#dLux.propagators.PhysicalMFT.number_of_fringes--parameters","text":"wavefront : Wavefront The Wavefront that is getting propagated.","title":"Parameters"},{"location":"developer_documentation/propagators/variable_sampling/physical_mft/#dLux.propagators.PhysicalMFT.number_of_fringes--returns","text":"fringes : float The floating point number of diffraction fringes in the plane of propagation.","title":"Returns"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/","text":"Bases: Propagator A propagator that users the Soummer et. al. 2007 MFT algorithm to implement variable sampling in the plane of propagation rather than the enforced; one pixel in the input plane = one diffraction fringe in the output plane, fast fourier transform algorithm. Attributes: Name Type Description pixel_scale_out float, meters/pixel or radians/pixel The pixel scale in the plane of propagation measured in meters (radians) per pixel. pixels_out int The number of pixels in the plane of propagation. pixel_scale_out = np . array ( pixel_scale_out ) . astype ( float ) instance-attribute pixels_out = int ( pixels_out ) instance-attribute tilt = bool ( tilt ) instance-attribute __call__ ( parameters ) Propagate a Wavefront to the focal_plane of the lens or mirror. Parameters: Name Type Description Default parameters dict A dictionary that must contain a \"Wavefront\" key. required Returns parameters : dict A dictionary with the updated \"Wavefront\" key; value __init__ ( pixel_scale_out , pixels_out , inverse = False , tilt = False ) Constructor for VariableSampling propagators. Parameters: Name Type Description Default pixels_out int The number of pixels in the output plane (side length). required pixel_scale_out float , meters The pixel scale in the output plane in units of meters (radians) per pixel. required inverse bool True if the inverse algorithm is to be used else False. False tilt bool True if the tilt of the Wavefront is to be considered else False. False get_pixel_offsets ( wavefront ) The offset(s) in units of pixels. Parameters: Name Type Description Default wavefront Wavefront The wavefront to propagate. required Returns: Name Type Description pixel_offset Array , pixels The offset from the x and y plane. get_pixel_scale_out () Accessor for the pixel scale in the output plane. Returns: Name Type Description pixel_scale_out float , meters The pixel scale in the output plane. get_pixels_out () Accessor for the pixels_out parameter. Returns: Name Type Description pixels_out int The number of pixels in the plane of propagation. is_tilted () Returns: Name Type Description tilt bool Whether or not the tilt of the Wavefront is to be considered. number_of_fringes ( wavefront ) The number of diffraction fringes in the output plane. This is an abstract method and needs to be implemented by the subclasses. Parameters: Name Type Description Default wavefront Wavefront The Wavefront that is getting propagated to the output plane. required Returns: Name Type Description fringes float The number of diffraction fringes in the output plane.","title":"Variable Sampling Propagator"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.pixel_scale_out","text":"","title":"pixel_scale_out"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.pixels_out","text":"","title":"pixels_out"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.tilt","text":"","title":"tilt"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.__call__","text":"Propagate a Wavefront to the focal_plane of the lens or mirror. Parameters: Name Type Description Default parameters dict A dictionary that must contain a \"Wavefront\" key. required","title":"__call__()"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.__call__--returns","text":"parameters : dict A dictionary with the updated \"Wavefront\" key; value","title":"Returns"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.__init__","text":"Constructor for VariableSampling propagators. Parameters: Name Type Description Default pixels_out int The number of pixels in the output plane (side length). required pixel_scale_out float , meters The pixel scale in the output plane in units of meters (radians) per pixel. required inverse bool True if the inverse algorithm is to be used else False. False tilt bool True if the tilt of the Wavefront is to be considered else False. False","title":"__init__()"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.get_pixel_offsets","text":"The offset(s) in units of pixels. Parameters: Name Type Description Default wavefront Wavefront The wavefront to propagate. required Returns: Name Type Description pixel_offset Array , pixels The offset from the x and y plane.","title":"get_pixel_offsets()"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.get_pixel_scale_out","text":"Accessor for the pixel scale in the output plane. Returns: Name Type Description pixel_scale_out float , meters The pixel scale in the output plane.","title":"get_pixel_scale_out()"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.get_pixels_out","text":"Accessor for the pixels_out parameter. Returns: Name Type Description pixels_out int The number of pixels in the plane of propagation.","title":"get_pixels_out()"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.is_tilted","text":"Returns: Name Type Description tilt bool Whether or not the tilt of the Wavefront is to be considered.","title":"is_tilted()"},{"location":"developer_documentation/propagators/variable_sampling/variable_sampling_propagator/#dLux.propagators.VariableSamplingPropagator.number_of_fringes","text":"The number of diffraction fringes in the output plane. This is an abstract method and needs to be implemented by the subclasses. Parameters: Name Type Description Default wavefront Wavefront The Wavefront that is getting propagated to the output plane. required Returns: Name Type Description fringes float The number of diffraction fringes in the output plane.","title":"number_of_fringes()"},{"location":"developer_documentation/wavefronts/angular_wavefront/","text":"Bases: Wavefront A plane wave extending the abstract Wavefront class. Stores phase and amplitude arrays. pixel_scale has units of meters per pixel in pupil planes and radians per pixel in focal planes. Assumes the wavefront is square. Attributes: Name Type Description plane_type str The type of plane occupied by the wavefront. plane_type = None instance-attribute __init__ ( wavelength , offset ) Constructor for `AngularWavefront`. Parameters ---------- wavelength : float, meters The wavelength of the Wavefront . offset : Array, radians The (x, y) angular offset of the Wavefront from the optical axis. Returns ------- wavefront : AngularWavefront The new wavefront with `None` at the extra leaves. get_plane_type () Returns: Name Type Description plane str The plane that the Wavefront is currently in. The options are currently \"Pupil\", \"Focal\" and \"None\". set_plane_type ( plane ) Parameters: Name Type Description Default plane str A string describing the plane that the Wavefront is currently in. required Returns wavefront : Wavefront The new Wavefront with the update plane information.","title":"Angular Wavefront"},{"location":"developer_documentation/wavefronts/angular_wavefront/#dLux.wavefronts.AngularWavefront.plane_type","text":"","title":"plane_type"},{"location":"developer_documentation/wavefronts/angular_wavefront/#dLux.wavefronts.AngularWavefront.__init__","text":"Constructor for `AngularWavefront`. Parameters ---------- wavelength : float, meters The wavelength of the Wavefront . offset : Array, radians The (x, y) angular offset of the Wavefront from the optical axis. Returns ------- wavefront : AngularWavefront The new wavefront with `None` at the extra leaves.","title":"__init__()"},{"location":"developer_documentation/wavefronts/angular_wavefront/#dLux.wavefronts.AngularWavefront.get_plane_type","text":"Returns: Name Type Description plane str The plane that the Wavefront is currently in. The options are currently \"Pupil\", \"Focal\" and \"None\".","title":"get_plane_type()"},{"location":"developer_documentation/wavefronts/angular_wavefront/#dLux.wavefronts.AngularWavefront.set_plane_type","text":"Parameters: Name Type Description Default plane str A string describing the plane that the Wavefront is currently in. required","title":"set_plane_type()"},{"location":"developer_documentation/wavefronts/angular_wavefront/#dLux.wavefronts.AngularWavefront.set_plane_type--returns","text":"wavefront : Wavefront The new Wavefront with the update plane information.","title":"Returns"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/","text":"Bases: Wavefront Expresses the behaviour and state of a wavefront propagating in an optical system under the fresnel assumptions. This implementation is based on the same class from the poppy library poppy and Chapter 3 from Applied Optics and Optical Engineering by Lawrence G. N. Approximates the wavefront as a Gaussian Beam parameterised by the radius of the beam, the phase radius, the phase factor and the Rayleigh distance. Propagation is based on two different regimes for a total of four different opertations. Attributes: Name Type Description position float , meters The position of the wavefront in the optical system. beam_radius float , meters The radius of the beam. phase_radius float , unitless The phase radius of the gaussian beam. beam_radius = None instance-attribute phase_radius = np . inf instance-attribute position = None instance-attribute __init__ ( offset , wavelength ) Creates a wavefront with an empty amplitude and phase arrays but of a given wavelength and phase offset. Parameters: Name Type Description Default beam_radius float Radius of the beam at the initial optical plane. required wavelength float , meters The wavelength of the Wavefront . required offset Array , radians The (x, y) angular offset of the Wavefront from the optical axis. required phase_radius float The phase radius of the GuasianWavefront. This is a unitless quantity. required calculate_pixel_scale ( position ) The pixel scale at the position along the axis of propagation. Assumes that the wavefront is square. That is: x, y = self.amplitude.shape (x == y) == True Parameters: Name Type Description Default position float The position of the wavefront aling the axis of propagation in metres. required get_beam_radius () Accessor for the radius of the wavefront. Returns: Name Type Description beam_radius float The radius of the GaussianWavefront in meters. get_phase_radius () Accessor for the phase radius of the wavefront. Returns: Name Type Description phase_radius float The phase radius of the wavefront. This is a unitless quantity. get_position () Accessor for the position of the wavefront. Returns position : float The position of the Wavefront from its starting point in meters. is_inside ( distance ) Determines whether a point at along the axis of propagation at distance away from the current position is inside the rayleigh distance. Parameters: Name Type Description Default distance float The distance to test in metres. required Returns: Name Type Description inside bool true if the point is within the rayleigh distance false otherwise. location_of_waist () Calculates the position of the waist along the direction of propagation based of the current state of the wave. Returns: Name Type Description waist float The position of the waist in metres. quadratic_phase_factor ( distance ) Convinience function that simplifies many of the diffraction equations. Caclulates a quadratic phase factor associated with the beam. Parameters: Name Type Description Default distance float The distance of the propagation measured in metres. required Returns: Name Type Description phase float The near-field quadratic phase accumulated by the beam from a propagation of distance. rayleigh_distance () Calculates the rayleigh distance of the Gaussian beam. Returns: Name Type Description rayleigh_distance float The Rayleigh distance of the wavefront in metres. set_beam_radius ( beam_radius ) Mutator for the beam_radius . Parameters: Name Type Description Default beam_radius float The new beam_radius in meters. required Returns: Name Type Description wavefront GaussianWavefront A modified GaussianWavefront with the new beam_radius. set_phase_radius ( phase_radius ) Mutator for the phase_radius. Parameters: Name Type Description Default phase_radius float The new phase_radius in meters. required Returns: Name Type Description wavefront GaussianWavefront A modified GaussianWavefront with the new phase_radius. set_position ( position ) Mutator for the position of the wavefront. Changes the pixel_scale which is a function of the position. Parameters: Name Type Description Default position float The new position of the wavefront from its starting point assumed to be in meters. required Returns: Name Type Description wavefront GaussianWavefront This wavefront at the new position. transfer_function ( distance ) The optical transfer function (OTF) for the gaussian beam. Assumes propagation is along the axis. Parameters: Name Type Description Default distance float The distance to propagate the wavefront along the beam via the optical transfer function in metres. required Returns: Name Type Description phase float A phase representing the evolution of the wavefront over the distance. References Wikipedia contributors. (2022, January 3). Direction cosine. In Wikipedia, The Free Encyclopedia. June 23, 2022, from https://en.wikipedia.org/wiki/Direction_cosine Wikipedia contributors. (2022, January 3). Spatial frequecy. In Wikipedia, The Free Encyclopedia. June 23, 2022, from https://en.wikipedia.org/wiki/Spatial_frequency waist_radius () The radius of the beam at the waist. Returns: Name Type Description waist_radius float The radius of the beam at the waist in metres.","title":"Guassian Wavefront"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.beam_radius","text":"","title":"beam_radius"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.phase_radius","text":"","title":"phase_radius"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.position","text":"","title":"position"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.__init__","text":"Creates a wavefront with an empty amplitude and phase arrays but of a given wavelength and phase offset. Parameters: Name Type Description Default beam_radius float Radius of the beam at the initial optical plane. required wavelength float , meters The wavelength of the Wavefront . required offset Array , radians The (x, y) angular offset of the Wavefront from the optical axis. required phase_radius float The phase radius of the GuasianWavefront. This is a unitless quantity. required","title":"__init__()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.calculate_pixel_scale","text":"The pixel scale at the position along the axis of propagation. Assumes that the wavefront is square. That is: x, y = self.amplitude.shape (x == y) == True Parameters: Name Type Description Default position float The position of the wavefront aling the axis of propagation in metres. required","title":"calculate_pixel_scale()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.get_beam_radius","text":"Accessor for the radius of the wavefront. Returns: Name Type Description beam_radius float The radius of the GaussianWavefront in meters.","title":"get_beam_radius()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.get_phase_radius","text":"Accessor for the phase radius of the wavefront. Returns: Name Type Description phase_radius float The phase radius of the wavefront. This is a unitless quantity.","title":"get_phase_radius()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.get_position","text":"Accessor for the position of the wavefront.","title":"get_position()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.get_position--returns","text":"position : float The position of the Wavefront from its starting point in meters.","title":"Returns"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.is_inside","text":"Determines whether a point at along the axis of propagation at distance away from the current position is inside the rayleigh distance. Parameters: Name Type Description Default distance float The distance to test in metres. required Returns: Name Type Description inside bool true if the point is within the rayleigh distance false otherwise.","title":"is_inside()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.location_of_waist","text":"Calculates the position of the waist along the direction of propagation based of the current state of the wave. Returns: Name Type Description waist float The position of the waist in metres.","title":"location_of_waist()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.quadratic_phase_factor","text":"Convinience function that simplifies many of the diffraction equations. Caclulates a quadratic phase factor associated with the beam. Parameters: Name Type Description Default distance float The distance of the propagation measured in metres. required Returns: Name Type Description phase float The near-field quadratic phase accumulated by the beam from a propagation of distance.","title":"quadratic_phase_factor()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.rayleigh_distance","text":"Calculates the rayleigh distance of the Gaussian beam. Returns: Name Type Description rayleigh_distance float The Rayleigh distance of the wavefront in metres.","title":"rayleigh_distance()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.set_beam_radius","text":"Mutator for the beam_radius . Parameters: Name Type Description Default beam_radius float The new beam_radius in meters. required Returns: Name Type Description wavefront GaussianWavefront A modified GaussianWavefront with the new beam_radius.","title":"set_beam_radius()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.set_phase_radius","text":"Mutator for the phase_radius. Parameters: Name Type Description Default phase_radius float The new phase_radius in meters. required Returns: Name Type Description wavefront GaussianWavefront A modified GaussianWavefront with the new phase_radius.","title":"set_phase_radius()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.set_position","text":"Mutator for the position of the wavefront. Changes the pixel_scale which is a function of the position. Parameters: Name Type Description Default position float The new position of the wavefront from its starting point assumed to be in meters. required Returns: Name Type Description wavefront GaussianWavefront This wavefront at the new position.","title":"set_position()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.transfer_function","text":"The optical transfer function (OTF) for the gaussian beam. Assumes propagation is along the axis. Parameters: Name Type Description Default distance float The distance to propagate the wavefront along the beam via the optical transfer function in metres. required Returns: Name Type Description phase float A phase representing the evolution of the wavefront over the distance.","title":"transfer_function()"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.transfer_function--references","text":"Wikipedia contributors. (2022, January 3). Direction cosine. In Wikipedia, The Free Encyclopedia. June 23, 2022, from https://en.wikipedia.org/wiki/Direction_cosine Wikipedia contributors. (2022, January 3). Spatial frequecy. In Wikipedia, The Free Encyclopedia. June 23, 2022, from https://en.wikipedia.org/wiki/Spatial_frequency","title":"References"},{"location":"developer_documentation/wavefronts/gaussian_wavefront/#dLux.wavefronts.GaussianWavefront.waist_radius","text":"The radius of the beam at the waist. Returns: Name Type Description waist_radius float The radius of the beam at the waist in metres.","title":"waist_radius()"},{"location":"developer_documentation/wavefronts/physical_wavefront/","text":"Bases: Wavefront A plane wave extending the abstract Wavefront class. Stores phase and amplitude arrays. pixel_scale has units of meters/pixel. Assumes the wavefront is square. This is Physical as opposed to Angular, because there are no infinite distances. Attributes: Name Type Description plane_type str The type of plane occupied by the wavefront. plane_type = None instance-attribute __init__ ( wavelength , offset ) Constructor for a PhysicalWavefront . Parameters: Name Type Description Default wavelength float , meters The wavelength of the Wavefront . required offset Array , radians The (x, y) angular offset of the Wavefront from the optical axis. required Returns required wavefront PhysicalWavefront The new wavefront with None at the extra leaves. required get_plane_type () Returns: Name Type Description plane str The plane that the Wavefront is currently in. The options are currently \"Pupil\", \"Focal\" and \"None\". set_plane_type ( plane ) Parameters: Name Type Description Default plane str A string describing the plane that the Wavefront is currently in. required Returns wavefront : Wavefront The new Wavefront with the update plane information. transfer_function ( distance ) The Optical Transfer Function corresponding to the evolution of the wavefront when propagating a distance. Parameters: Name Type Description Default distance float The distance that is getting propagated in meters. required Returns: Name Type Description phase Array The phase that represents the optical transfer.","title":"Physical Wavefront"},{"location":"developer_documentation/wavefronts/physical_wavefront/#dLux.wavefronts.PhysicalWavefront.plane_type","text":"","title":"plane_type"},{"location":"developer_documentation/wavefronts/physical_wavefront/#dLux.wavefronts.PhysicalWavefront.__init__","text":"Constructor for a PhysicalWavefront . Parameters: Name Type Description Default wavelength float , meters The wavelength of the Wavefront . required offset Array , radians The (x, y) angular offset of the Wavefront from the optical axis. required Returns required wavefront PhysicalWavefront The new wavefront with None at the extra leaves. required","title":"__init__()"},{"location":"developer_documentation/wavefronts/physical_wavefront/#dLux.wavefronts.PhysicalWavefront.get_plane_type","text":"Returns: Name Type Description plane str The plane that the Wavefront is currently in. The options are currently \"Pupil\", \"Focal\" and \"None\".","title":"get_plane_type()"},{"location":"developer_documentation/wavefronts/physical_wavefront/#dLux.wavefronts.PhysicalWavefront.set_plane_type","text":"Parameters: Name Type Description Default plane str A string describing the plane that the Wavefront is currently in. required","title":"set_plane_type()"},{"location":"developer_documentation/wavefronts/physical_wavefront/#dLux.wavefronts.PhysicalWavefront.set_plane_type--returns","text":"wavefront : Wavefront The new Wavefront with the update plane information.","title":"Returns"},{"location":"developer_documentation/wavefronts/physical_wavefront/#dLux.wavefronts.PhysicalWavefront.transfer_function","text":"The Optical Transfer Function corresponding to the evolution of the wavefront when propagating a distance. Parameters: Name Type Description Default distance float The distance that is getting propagated in meters. required Returns: Name Type Description phase Array The phase that represents the optical transfer.","title":"transfer_function()"},{"location":"developer_documentation/wavefronts/wavefront/","text":"Bases: eqx . Module An abstract module that should never be directly substantiated. This class represents a general optical wavefront although the exact implementation must go through a subclass. Wavefront objects are assumed to be square. The Wavefront and its contents are not intended to be public functionality. The object is initialised using in a vectorised manner using jax.vmap over both wavelength and offset. These values are initialised within the OpticalSystem class by the CreateWavefront layer which represents the source of the input wavefront. Attributes: Name Type Description wavelength float , meters The wavelength of the Wavefront . offset Array , radians The (x, y) angular offset of the Wavefront from the optical axis. amplitude Array , power The electric field amplitude of the Wavefront . phase Array , radians The electric field phase of the Wavefront . pixel_scale float, meters/pixel The physical dimensions of each square pixel. amplitude = None instance-attribute offset = np . array ( offset ) . astype ( float ) instance-attribute phase = None instance-attribute pixel_scale = None instance-attribute wavelength = np . array ( wavelength ) . astype ( float ) instance-attribute __init__ ( wavelength , offset ) Initialises a minimal Wavefront specified only by the wavelength and offset. Parameters: Name Type Description Default wavelength float , meters The wavelength of the Wavefront in meters. required offset Array , radians The (x, y) angular offset of the wavefront from the optical axis. required add_opd ( path_difference ) Applies the wavelength dependent phase based on the supplied optical path difference. Throws error : TypeError If self.phase has not been externally initialised error : ValueError If path_difference.shape != self.phase.shape or If path_difference.shape != (1,) Parameters: Name Type Description Default path_difference Union [ float , Array ], meters The physical optical path difference of either the entire wavefront or each pixel individually. required Returns: Name Type Description wavefront Wavefront The new wavefront with the phases updated according to path_difference add_phase ( array_like ) Add either a float or array of phase to Wavefront . Throws error : TypeError If self.phase has not been initialised externally. error : ValueError If amounts is not of the same dimensions as self.phases or amounts . i.e. py ((weights.shape == (1,)) | (weights.shape == self.amplitude.shape) == True Parameters: Name Type Description Default array_like Union [ float , array ] The amount of phase to add to the current phase value of each pixel. A scalar modifies the global phase of the wavefront. required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated array of phases. crop_to ( number_of_pixels_out ) Crops the Wavefront . Assumes that number_of_pixels_out < self.amplitude.shape[0] . Wavefront s with an even number of pixels can only be cropped to an even number of pixels without interpolation and vice-versa. Throws error : ValueError If number_of_pixels_out%2 != self.amplitude.shape[0]%2 i.e. padding an even (odd) Wavefront to odd (even). Parameters: Name Type Description Default number_of_pixels_out int The square side length of the array after it has been zero padded. required Returns: Name Type Description wavefront PhysicalWavefront The new Wavefront with the optical disturbance zero cropped to the new dimensions. get_amplitude () Returns: Name Type Description amplitude Array , power The electric field amplitude of the Wavefront . get_complex_form () The electric field described by this Wavefront in complex form. Throws error : TypeError If self.amplitude has not been externally instantiated. error : TypeError If self.phase has not been externally instantiated. Returns: Name Type Description field Array [ complex ] The complex electric field of the wavefront. get_imaginary () The imaginary component of the Wavefront Throws : TypeError If self.amplitude or self.phase have not been initialised externally. Returns: Name Type Description wavefront Array The imaginary component of the complex Wavefront . get_offset () Returns: Name Type Description offset Array , radians The (x, y) angular offset of the wavefront from the optical axis. get_phase () Returns: Name Type Description phase Array , radians The phases of each pixel on the Wavefront . get_pixel_coordinates ( number_of_pixels ) Returns a vector of pixel indexes centered on the optical axis with length number_of_pixels. Parameters: Name Type Description Default number_of_pixels int The length of the paraxial pixel array. required Returns: Name Type Description pixel_coordinates Array The paraxial pixel positions of with dimensions number_of_pixels get_pixel_grid () Returns the wavefront pixel grid relative to the optical axis. Throws error : TypeError If self.amplitude has not been externally initialised Returns: Name Type Description pixel_grid Array The paraxial pixel coordaintes. Guarantees self.get_pixel_grid().shape == self.amplitude.shape get_pixel_positions () Returns the physical positions of the wavefront pixels in meters Throws error : TypeError If self.amplitude has not been externally initialised error : TypeError If self.pixel_scale has not been externally initialised Returns: Name Type Description pixel_positions Array The physical positions of the optical disturbance. Guarantees that self.get_coordinates().shape == self.amplitude.shape . get_pixel_scale () Returns pixel_scale : float, meters/pixel The current pixel_scale associated with the wavefront. get_real () The real component of the Wavefront . Throws : TypeError If self.amplitude or self.phase have not been initialised externally. Returns wavefront : Array The real component of the complex Wavefront . get_wavelength () Returns: Name Type Description wavelength float , meters The wavelength of the Wavefront . interpolate ( coordinates , real_imaginary = False ) Interpolates the Wavefront at the points specified by coordinates. The default interpolation uses the amplitude and phase, however by passing real_imgainary=True the interpolation can be based on the real and imaginary information. The main use of this function is as a helper method to self.paraxial_interpolate . Parameters: Name Type Description Default coordinates Array The coordinates to interpolate the optical disturbance at. Assumed to have the units meters. required real_imaginary bool Whether to use the amplitude-phase or real-imaginary representation for the interpolation. False Returns: Name Type Description field tuple [ Array , Array ] The amplitude and phase of the wavefront at coordinates based on a linear interpolation. invert_x () Reflects the wavefront about the x axis. Throws error : ValueError If self.amplitude is not externally initialised. error : ValueError If self.phase is not externally initialised. Returns: Name Type Description wavefront Wavefront The new Wavefront with the phase and the amplitude arrays reversed along the x axis. invert_x_and_y () Reflects the wavefront about both axes. Throws error : ValueError If self.amplitude is not externally initialised. error : ValueError If self.phase not externally initialised. Returns: Name Type Description wavefront Wavefront The new Wavefront with the phase and amplitude arrays reversed along both axes. invert_y () Reflects the wavefront about the y axis. Throws error : ValueError If self.amplitude is not externally initialised. error : ValueError If self.phase is not externally initialised. Returns: Name Type Description wavefront Wavefront The new wavefront with the phase and the amplitude arrays reversed along the y axis. multiply_amplitude ( array_like ) Multiply the amplitude of the Wavefront by either a float or array. Throws error : TypeError If self.amplitude has not initialised externally. error : ValueError If weights is not a scalar, or an array of the same dimensions. i.e. py ((weights.shape == (1,)) | (weights.shape == self.amplitude.shape) == True Parameters: Name Type Description Default array_like Union [ float , array ] An array that has the same dimensions as self.amplitude by which elementwise multiply each pixel. A float to apply to the entire array at once. required Returns: Name Type Description wavefront Wavefront The new Wavefront with the applied changes to the amplitude array. normalise () Normalises the total power of the wavefront to 1. Throws error : TypeError If self.amplitude has not been externally instantiated. Returns: Name Type Description wavefront Wavefront The new wavefront with the normalised electric field amplitudes. number_of_pixels () The side length of the pixel array that represents the electric field of the Wavefront . Calcualtes the pixels value from the shape of the amplitude array. Throws error : TypeError If the amplitude and phase of the Wavefront have not been externally initialised. Returns pixels : int The number of pixels that represent the Wavefront along one side. pad_to ( number_of_pixels_out ) Pads the Wavefront with zeros. Assumes that number_of_pixels_out > self.amplitude.shape[0] . Note that Wavefronts with even pixel dimensions can only be padded (without interpolation) to even pixel dimensions and vice-versa. Throws error : ValueError If number_of_pixels_out%2 != self.amplitude.shape[0]%2 i.e. padding an even (odd) Wavefront to odd (even). Parameters: Name Type Description Default number_of_pixels_out int The square side length of the array after it has been zero padded. required Returns: Name Type Description wavefront PhysicalWavefront The new Wavefront with the optical disturbance zero padded to the new dimensions. paraxial_interpolate ( pixel_scale_out , number_of_pixels_out , real_imaginary = False ) Interpolates the Wavefront so that it remains centered on the optical axis. Calculation can be performed using either the real-imaginary or amplitude-phase representations of the wavefront. The default is amplitude-phase. Parameters: Name Type Description Default pixel_scale_out float The dimensions of a single square pixel after the interpolation. required number_of_pixels_out int The number of pixels along one side of the square Wavefront after the interpolation. required real_imaginary bool Whether to use the real-imaginary representation of the wavefront for the interpolation. False Returns: Name Type Description wavefront PhysicalWavefront The new wavefront with the updated optical disturbance. set_amplitude ( amplitude ) Parameters: Name Type Description Default amplitude Array , power The electric field amplitude of the Wavefront . required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated amplitude. set_offset ( offset ) Parameters: Name Type Description Default offset Array , radians The (x, y) angular offset of the wavefront from the optical axis. required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated offset. set_phase ( phase ) Parameters: Name Type Description Default phase Array , radians The phases of each pixel on the Wavefront . required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated phase. set_pixel_scale ( pixel_scale ) Mutator for the pixel_scale. Parameters: Name Type Description Default pixel_scale float The new pixel_scale associated with the wavefront. required Returns: Name Type Description wavefront Wavefront The new Wavefront object with the updated pixel_scale set_wavelength ( wavelength ) Parameters: Name Type Description Default wavelength float , meters The wavelength of the Wavefront . required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated wavelength. update_phasor ( amplitude , phase ) Used to update the state of the wavefront. This should typically only be called from within a propagator layers in order to ensure that values such as pixelscale are updates appropriately. It is assumed that amplitude and phase have the same shape i.e. amplitude.shape == phase.shape . It is not assumed that the shape of the wavefront is maintained i.e. self.amplitude.shape == amplitude.shape is not required. Parameters: Name Type Description Default amplitude Array , power The electric field amplitudes of the wavefront. required phase Array , radians The phases of each pixel in the new wavefront. required Returns: Name Type Description wavefront Wavefront The new Wavefront specified by amplitude and phase wavefront_to_psf () Calculates the Point Spread Function (PSF), ie the squared modulus of the complex wavefront. Throws error : TypeError If self.amplitude has not been externally initialised. Returns: Name Type Description psf Array The PSF of the wavefront.","title":"Wavefront"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.amplitude","text":"","title":"amplitude"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.offset","text":"","title":"offset"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.phase","text":"","title":"phase"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.pixel_scale","text":"","title":"pixel_scale"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.wavelength","text":"","title":"wavelength"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.__init__","text":"Initialises a minimal Wavefront specified only by the wavelength and offset. Parameters: Name Type Description Default wavelength float , meters The wavelength of the Wavefront in meters. required offset Array , radians The (x, y) angular offset of the wavefront from the optical axis. required","title":"__init__()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.add_opd","text":"Applies the wavelength dependent phase based on the supplied optical path difference.","title":"add_opd()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.add_opd--throws","text":"error : TypeError If self.phase has not been externally initialised error : ValueError If path_difference.shape != self.phase.shape or If path_difference.shape != (1,) Parameters: Name Type Description Default path_difference Union [ float , Array ], meters The physical optical path difference of either the entire wavefront or each pixel individually. required Returns: Name Type Description wavefront Wavefront The new wavefront with the phases updated according to path_difference","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.add_phase","text":"Add either a float or array of phase to Wavefront .","title":"add_phase()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.add_phase--throws","text":"error : TypeError If self.phase has not been initialised externally. error : ValueError If amounts is not of the same dimensions as self.phases or amounts . i.e. py ((weights.shape == (1,)) | (weights.shape == self.amplitude.shape) == True Parameters: Name Type Description Default array_like Union [ float , array ] The amount of phase to add to the current phase value of each pixel. A scalar modifies the global phase of the wavefront. required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated array of phases.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.crop_to","text":"Crops the Wavefront . Assumes that number_of_pixels_out < self.amplitude.shape[0] . Wavefront s with an even number of pixels can only be cropped to an even number of pixels without interpolation and vice-versa.","title":"crop_to()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.crop_to--throws","text":"error : ValueError If number_of_pixels_out%2 != self.amplitude.shape[0]%2 i.e. padding an even (odd) Wavefront to odd (even). Parameters: Name Type Description Default number_of_pixels_out int The square side length of the array after it has been zero padded. required Returns: Name Type Description wavefront PhysicalWavefront The new Wavefront with the optical disturbance zero cropped to the new dimensions.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_amplitude","text":"Returns: Name Type Description amplitude Array , power The electric field amplitude of the Wavefront .","title":"get_amplitude()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_complex_form","text":"The electric field described by this Wavefront in complex form.","title":"get_complex_form()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_complex_form--throws","text":"error : TypeError If self.amplitude has not been externally instantiated. error : TypeError If self.phase has not been externally instantiated. Returns: Name Type Description field Array [ complex ] The complex electric field of the wavefront.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_imaginary","text":"The imaginary component of the Wavefront","title":"get_imaginary()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_imaginary--throws","text":": TypeError If self.amplitude or self.phase have not been initialised externally. Returns: Name Type Description wavefront Array The imaginary component of the complex Wavefront .","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_offset","text":"Returns: Name Type Description offset Array , radians The (x, y) angular offset of the wavefront from the optical axis.","title":"get_offset()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_phase","text":"Returns: Name Type Description phase Array , radians The phases of each pixel on the Wavefront .","title":"get_phase()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_pixel_coordinates","text":"Returns a vector of pixel indexes centered on the optical axis with length number_of_pixels. Parameters: Name Type Description Default number_of_pixels int The length of the paraxial pixel array. required Returns: Name Type Description pixel_coordinates Array The paraxial pixel positions of with dimensions number_of_pixels","title":"get_pixel_coordinates()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_pixel_grid","text":"Returns the wavefront pixel grid relative to the optical axis.","title":"get_pixel_grid()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_pixel_grid--throws","text":"error : TypeError If self.amplitude has not been externally initialised Returns: Name Type Description pixel_grid Array The paraxial pixel coordaintes. Guarantees self.get_pixel_grid().shape == self.amplitude.shape","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_pixel_positions","text":"Returns the physical positions of the wavefront pixels in meters","title":"get_pixel_positions()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_pixel_positions--throws","text":"error : TypeError If self.amplitude has not been externally initialised error : TypeError If self.pixel_scale has not been externally initialised Returns: Name Type Description pixel_positions Array The physical positions of the optical disturbance. Guarantees that self.get_coordinates().shape == self.amplitude.shape .","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_pixel_scale","text":"","title":"get_pixel_scale()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_pixel_scale--returns","text":"pixel_scale : float, meters/pixel The current pixel_scale associated with the wavefront.","title":"Returns"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_real","text":"The real component of the Wavefront .","title":"get_real()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_real--throws","text":": TypeError If self.amplitude or self.phase have not been initialised externally.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_real--returns","text":"wavefront : Array The real component of the complex Wavefront .","title":"Returns"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.get_wavelength","text":"Returns: Name Type Description wavelength float , meters The wavelength of the Wavefront .","title":"get_wavelength()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.interpolate","text":"Interpolates the Wavefront at the points specified by coordinates. The default interpolation uses the amplitude and phase, however by passing real_imgainary=True the interpolation can be based on the real and imaginary information. The main use of this function is as a helper method to self.paraxial_interpolate . Parameters: Name Type Description Default coordinates Array The coordinates to interpolate the optical disturbance at. Assumed to have the units meters. required real_imaginary bool Whether to use the amplitude-phase or real-imaginary representation for the interpolation. False Returns: Name Type Description field tuple [ Array , Array ] The amplitude and phase of the wavefront at coordinates based on a linear interpolation.","title":"interpolate()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.invert_x","text":"Reflects the wavefront about the x axis.","title":"invert_x()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.invert_x--throws","text":"error : ValueError If self.amplitude is not externally initialised. error : ValueError If self.phase is not externally initialised. Returns: Name Type Description wavefront Wavefront The new Wavefront with the phase and the amplitude arrays reversed along the x axis.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.invert_x_and_y","text":"Reflects the wavefront about both axes.","title":"invert_x_and_y()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.invert_x_and_y--throws","text":"error : ValueError If self.amplitude is not externally initialised. error : ValueError If self.phase not externally initialised. Returns: Name Type Description wavefront Wavefront The new Wavefront with the phase and amplitude arrays reversed along both axes.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.invert_y","text":"Reflects the wavefront about the y axis.","title":"invert_y()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.invert_y--throws","text":"error : ValueError If self.amplitude is not externally initialised. error : ValueError If self.phase is not externally initialised. Returns: Name Type Description wavefront Wavefront The new wavefront with the phase and the amplitude arrays reversed along the y axis.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.multiply_amplitude","text":"Multiply the amplitude of the Wavefront by either a float or array.","title":"multiply_amplitude()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.multiply_amplitude--throws","text":"error : TypeError If self.amplitude has not initialised externally. error : ValueError If weights is not a scalar, or an array of the same dimensions. i.e. py ((weights.shape == (1,)) | (weights.shape == self.amplitude.shape) == True Parameters: Name Type Description Default array_like Union [ float , array ] An array that has the same dimensions as self.amplitude by which elementwise multiply each pixel. A float to apply to the entire array at once. required Returns: Name Type Description wavefront Wavefront The new Wavefront with the applied changes to the amplitude array.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.normalise","text":"Normalises the total power of the wavefront to 1.","title":"normalise()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.normalise--throws","text":"error : TypeError If self.amplitude has not been externally instantiated. Returns: Name Type Description wavefront Wavefront The new wavefront with the normalised electric field amplitudes.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.number_of_pixels","text":"The side length of the pixel array that represents the electric field of the Wavefront . Calcualtes the pixels value from the shape of the amplitude array.","title":"number_of_pixels()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.number_of_pixels--throws","text":"error : TypeError If the amplitude and phase of the Wavefront have not been externally initialised.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.number_of_pixels--returns","text":"pixels : int The number of pixels that represent the Wavefront along one side.","title":"Returns"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.pad_to","text":"Pads the Wavefront with zeros. Assumes that number_of_pixels_out > self.amplitude.shape[0] . Note that Wavefronts with even pixel dimensions can only be padded (without interpolation) to even pixel dimensions and vice-versa.","title":"pad_to()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.pad_to--throws","text":"error : ValueError If number_of_pixels_out%2 != self.amplitude.shape[0]%2 i.e. padding an even (odd) Wavefront to odd (even). Parameters: Name Type Description Default number_of_pixels_out int The square side length of the array after it has been zero padded. required Returns: Name Type Description wavefront PhysicalWavefront The new Wavefront with the optical disturbance zero padded to the new dimensions.","title":"Throws"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.paraxial_interpolate","text":"Interpolates the Wavefront so that it remains centered on the optical axis. Calculation can be performed using either the real-imaginary or amplitude-phase representations of the wavefront. The default is amplitude-phase. Parameters: Name Type Description Default pixel_scale_out float The dimensions of a single square pixel after the interpolation. required number_of_pixels_out int The number of pixels along one side of the square Wavefront after the interpolation. required real_imaginary bool Whether to use the real-imaginary representation of the wavefront for the interpolation. False Returns: Name Type Description wavefront PhysicalWavefront The new wavefront with the updated optical disturbance.","title":"paraxial_interpolate()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.set_amplitude","text":"Parameters: Name Type Description Default amplitude Array , power The electric field amplitude of the Wavefront . required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated amplitude.","title":"set_amplitude()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.set_offset","text":"Parameters: Name Type Description Default offset Array , radians The (x, y) angular offset of the wavefront from the optical axis. required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated offset.","title":"set_offset()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.set_phase","text":"Parameters: Name Type Description Default phase Array , radians The phases of each pixel on the Wavefront . required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated phase.","title":"set_phase()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.set_pixel_scale","text":"Mutator for the pixel_scale. Parameters: Name Type Description Default pixel_scale float The new pixel_scale associated with the wavefront. required Returns: Name Type Description wavefront Wavefront The new Wavefront object with the updated pixel_scale","title":"set_pixel_scale()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.set_wavelength","text":"Parameters: Name Type Description Default wavelength float , meters The wavelength of the Wavefront . required Returns: Name Type Description wavefront Wavefront The new Wavefront with the updated wavelength.","title":"set_wavelength()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.update_phasor","text":"Used to update the state of the wavefront. This should typically only be called from within a propagator layers in order to ensure that values such as pixelscale are updates appropriately. It is assumed that amplitude and phase have the same shape i.e. amplitude.shape == phase.shape . It is not assumed that the shape of the wavefront is maintained i.e. self.amplitude.shape == amplitude.shape is not required. Parameters: Name Type Description Default amplitude Array , power The electric field amplitudes of the wavefront. required phase Array , radians The phases of each pixel in the new wavefront. required Returns: Name Type Description wavefront Wavefront The new Wavefront specified by amplitude and phase","title":"update_phasor()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.wavefront_to_psf","text":"Calculates the Point Spread Function (PSF), ie the squared modulus of the complex wavefront.","title":"wavefront_to_psf()"},{"location":"developer_documentation/wavefronts/wavefront/#dLux.wavefronts.Wavefront.wavefront_to_psf--throws","text":"error : TypeError If self.amplitude has not been externally initialised. Returns: Name Type Description psf Array The PSF of the wavefront.","title":"Throws"},{"location":"user_documentation/optical_system/","text":"Bases: eqx . Module Optical System class, Equinox Modle DOCSTRING NOT COMPLETE A Class to store and apply properties external to the optical system Ie: stellar positions and specturms positions: (Nstars, 2) array wavels: (Nwavels) array weights: (Nwavel)/(Nwavels, Nstars) array Notes: - Take in layers in order to re-intialise the model every call? General images output shape: (Nimages, Nstars, Nwavels, Npix, Npix) Currently doesnt allow temporal variation in specturm becuase im lazy Currently doesnt allow temporal variation in flux becuase im lazy ToDo: Add getter methods for acessing weights and fluxes attributes that use np.squeeze to remove empy axes Nims = len ( self . dithers ) instance-attribute Nstars = len ( self . positions ) instance-attribute Nwavels = 0 if wavels is None else len ( self . wavels ) instance-attribute detector_layers = [] if detector_layers is None else detector_layers instance-attribute dithers = np . zeros ([ 1 , 2 ]) if dithers is None else dithers instance-attribute fluxes = np . ones ( len ( self . positions )) if fluxes is None else np . array ( fluxes ) instance-attribute layers = layers instance-attribute positions = np . zeros ([ 1 , 2 ]) if positions is None else np . array ( positions ) instance-attribute wavels = np . array ( wavels ) . astype ( float ) instance-attribute weights = np . ones ( len ( self . wavels )) if weights is None else np . array ( weights ) instance-attribute __call__ () Maps the wavelength and position calcualtions across multiple dimesions To Do: Reformat the vmaps such that we only vmap over wavelengths and positions in order to simplify the dimensionality __init__ ( layers , wavels = None , positions = None , fluxes = None , weights = None , dithers = None , detector_layers = None ) apply_detector_layers ( image ) debug_prop ( wavel , offset = np . zeros ( 2 )) I believe this is diffable but there is no reason to force it to be dither_positions () Dithers the input positions, returned with shape (Npsfs, 2) propagate_mono ( wavel , offset = np . zeros ( 2 )) propagate_single ( wavels , offset = np . zeros ( 2 ), weights = 1.0 , flux = 1.0 , apply_detector = False ) Only propagates a single star, allowing wavelength input sums output to single array Wavels must be an array and the same shape as weights if provided reshape_psfs ( psfs ) weight_psfs ( psfs ) Normalise Weights, and format weights/fluxes Psfs output shape: (Nims, Nstars, Nwavels, npix, npix) We want weights shape: (1, 1, Nwavels, 1, 1) We want fluxes shape: (1, Nstars, 1, 1, 1)","title":"Optical System"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.Nims","text":"","title":"Nims"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.Nstars","text":"","title":"Nstars"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.Nwavels","text":"","title":"Nwavels"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.detector_layers","text":"","title":"detector_layers"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.dithers","text":"","title":"dithers"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.fluxes","text":"","title":"fluxes"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.layers","text":"","title":"layers"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.positions","text":"","title":"positions"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.wavels","text":"","title":"wavels"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.weights","text":"","title":"weights"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.__call__","text":"Maps the wavelength and position calcualtions across multiple dimesions To Do: Reformat the vmaps such that we only vmap over wavelengths and positions in order to simplify the dimensionality","title":"__call__()"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.__init__","text":"","title":"__init__()"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.apply_detector_layers","text":"","title":"apply_detector_layers()"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.debug_prop","text":"I believe this is diffable but there is no reason to force it to be","title":"debug_prop()"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.dither_positions","text":"Dithers the input positions, returned with shape (Npsfs, 2)","title":"dither_positions()"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.propagate_mono","text":"","title":"propagate_mono()"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.propagate_single","text":"Only propagates a single star, allowing wavelength input sums output to single array Wavels must be an array and the same shape as weights if provided","title":"propagate_single()"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.reshape_psfs","text":"","title":"reshape_psfs()"},{"location":"user_documentation/optical_system/#dLux.base.OpticalSystem.weight_psfs","text":"Normalise Weights, and format weights/fluxes Psfs output shape: (Nims, Nstars, Nwavels, npix, npix) We want weights shape: (1, 1, Nwavels, 1, 1) We want fluxes shape: (1, Nstars, 1, 1, 1)","title":"weight_psfs()"},{"location":"user_documentation/layers/add_phase/","text":"Bases: eqx . Module Takes in an array of phase values and adds them to the phase term of the input wavefront. ie wavelength independent This would represent a geometric phase optic like the TinyTol liquid crystal Pupil. Parameters: Name Type Description Default npix int The number of pixels along the edge of the wavefront. This is not a differentiable parameter. required phase_array Array of phase values to be applied to the input wavefront. required npix = int ( phase_array . shape [ 0 ]) instance-attribute phase_array = np . array ( phase_array ) . astype ( float ) instance-attribute __call__ ( params_dict ) Apply the phase shift represented by this Layer to the wavefront. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following conditions must be satisfied: params_dict.get(\"Wavefront\") != None params_dict.get(\"Wavefront\").shape == self.phase_array.shape required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated. __init__ ( phase_array ) Parameters: Name Type Description Default phase_array float , radians Array of phase values to be applied to the input wavefront. required","title":"Add Phase"},{"location":"user_documentation/layers/add_phase/#dLux.layers.AddPhase.npix","text":"","title":"npix"},{"location":"user_documentation/layers/add_phase/#dLux.layers.AddPhase.phase_array","text":"","title":"phase_array"},{"location":"user_documentation/layers/add_phase/#dLux.layers.AddPhase.__call__","text":"Apply the phase shift represented by this Layer to the wavefront. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following conditions must be satisfied: params_dict.get(\"Wavefront\") != None params_dict.get(\"Wavefront\").shape == self.phase_array.shape required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"__call__()"},{"location":"user_documentation/layers/add_phase/#dLux.layers.AddPhase.__init__","text":"Parameters: Name Type Description Default phase_array float , radians Array of phase values to be applied to the input wavefront. required","title":"__init__()"},{"location":"user_documentation/layers/apply_aperture/","text":"Bases: eqx . Module Represents an arbitrary aperture in the optical path. Attributes: Name Type Description npix int , eqx . static_field () The number of pixels along the leading edge of the wavefront. aperture float An array representing the transmission of the aperture. aperture = np . array ( aperture ) instance-attribute npix = aperture . shape [ 0 ] instance-attribute __call__ ( params_dict ) Pass the wavefront through the Aperture . Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following conditions must be satisfied: params_dict.get(\"Wavefront\") != None params_dict.get(\"Wavefront\").shape == self.apperture.shape required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated. __init__ ( aperture ) Parameters: Name Type Description Default aperture Array [ float ] The array representing the transmission of the aperture. required","title":"Apply Aperture"},{"location":"user_documentation/layers/apply_aperture/#dLux.layers.ApplyAperture.aperture","text":"","title":"aperture"},{"location":"user_documentation/layers/apply_aperture/#dLux.layers.ApplyAperture.npix","text":"","title":"npix"},{"location":"user_documentation/layers/apply_aperture/#dLux.layers.ApplyAperture.__call__","text":"Pass the wavefront through the Aperture . Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following conditions must be satisfied: params_dict.get(\"Wavefront\") != None params_dict.get(\"Wavefront\").shape == self.apperture.shape required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"__call__()"},{"location":"user_documentation/layers/apply_aperture/#dLux.layers.ApplyAperture.__init__","text":"Parameters: Name Type Description Default aperture Array [ float ] The array representing the transmission of the aperture. required","title":"__init__()"},{"location":"user_documentation/layers/apply_basis_opd/","text":"Bases: eqx . Module Adds an array of phase values to the input wavefront calculated from the OPD. The phases are calculated from the basis arrays, and weighted by the coefficients. Parameters: Name Type Description Default nterms The number of zernike terms to apply, ignoring the first two radial terms: Piston, Tip, Tilt. This is not a differentiable parameter. required basis Arrays holding the pre-calculated basis vectors. This is not a differentiable parameter. required coeffs Array of shape (nterns) of coefficients to be applied to each basis vector. None basis = np . array ( basis ) instance-attribute coeffs = np . zeros ( len ( self . basis )) if coeffs is None else np . array ( coeffs ) . astype ( float ) instance-attribute npix = self . basis . shape [ - 1 ] instance-attribute __call__ ( params_dict ) Calculate and apply the appropriate phase shift to the wavefront. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None It is also assumed that self.basis.shape[-1] == wavefront.shape[0] and that both are square. required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated. __init__ ( basis , coeffs = None ) Parameters: Name Type Description Default basis Array The basis polynomials (2-dimensional) to use calculating the phase difference. It is assumed that the polynomials have been evaluated on a square surface. That is, the following condition is satisfied: basis.shape[-1] == basis.shape[-2] The array should be 3-dimensional unless a single basis vector is getting used. The leading axes (dimesion) should match the number of coefficients. required coeffs Array The coefficients by which to weight the basis vectors. This is assumed to be one dimensional and have the same length as the leading dimension of the basis . That is, the following conditions are met: coeffs.shape = (n, ) basis.shape = (n, m, m) If None , the default value is passed it is interpretted as np.zeros((n, )) . None get_total_opd () A convinience function to calculate the phase shift from the coefficients and the basis vectors. Returns: Name Type Description phase_shift Array The per-pixel phase shift of the wavefront.","title":"Apply Basis OPD"},{"location":"user_documentation/layers/apply_basis_opd/#dLux.layers.ApplyBasisOPD.basis","text":"","title":"basis"},{"location":"user_documentation/layers/apply_basis_opd/#dLux.layers.ApplyBasisOPD.coeffs","text":"","title":"coeffs"},{"location":"user_documentation/layers/apply_basis_opd/#dLux.layers.ApplyBasisOPD.npix","text":"","title":"npix"},{"location":"user_documentation/layers/apply_basis_opd/#dLux.layers.ApplyBasisOPD.__call__","text":"Calculate and apply the appropriate phase shift to the wavefront. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None It is also assumed that self.basis.shape[-1] == wavefront.shape[0] and that both are square. required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"__call__()"},{"location":"user_documentation/layers/apply_basis_opd/#dLux.layers.ApplyBasisOPD.__init__","text":"Parameters: Name Type Description Default basis Array The basis polynomials (2-dimensional) to use calculating the phase difference. It is assumed that the polynomials have been evaluated on a square surface. That is, the following condition is satisfied: basis.shape[-1] == basis.shape[-2] The array should be 3-dimensional unless a single basis vector is getting used. The leading axes (dimesion) should match the number of coefficients. required coeffs Array The coefficients by which to weight the basis vectors. This is assumed to be one dimensional and have the same length as the leading dimension of the basis . That is, the following conditions are met: coeffs.shape = (n, ) basis.shape = (n, m, m) If None , the default value is passed it is interpretted as np.zeros((n, )) . None","title":"__init__()"},{"location":"user_documentation/layers/apply_basis_opd/#dLux.layers.ApplyBasisOPD.get_total_opd","text":"A convinience function to calculate the phase shift from the coefficients and the basis vectors. Returns: Name Type Description phase_shift Array The per-pixel phase shift of the wavefront.","title":"get_total_opd()"},{"location":"user_documentation/layers/apply_opd/","text":"Bases: eqx . Module Takes in an array representing the Optical Path Difference (OPD) and applies the corresponding phase difference to the input wavefront. This would represent an etched reflective optic, or phase plate Parameters: Name Type Description Default opd_array float Array of OPD values to be applied to the input wavefront in units of meters. This is a differentiable parameter. required npix int The number of pixels along the leading edge of the opd_array stored for debugging purposes. required npix = int ( opd_array . shape [ 0 ]) instance-attribute opd_array = np . array ( opd_array ) . astype ( float ) instance-attribute __call__ ( params_dict ) Apply the optical path difference represented by this Layer to the Wavefront . Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following conditions must be satisfied: params_dict.get(\"Wavefront\") != None params_dict.get(\"Wavefront\").shape == self.phase_array.shape required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated. __init__ ( opd_array ) Parameters: Name Type Description Default opd_array float , meters The per pixel optical path differences. required","title":"Apply OPD"},{"location":"user_documentation/layers/apply_opd/#dLux.layers.ApplyOPD.npix","text":"","title":"npix"},{"location":"user_documentation/layers/apply_opd/#dLux.layers.ApplyOPD.opd_array","text":"","title":"opd_array"},{"location":"user_documentation/layers/apply_opd/#dLux.layers.ApplyOPD.__call__","text":"Apply the optical path difference represented by this Layer to the Wavefront . Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following conditions must be satisfied: params_dict.get(\"Wavefront\") != None params_dict.get(\"Wavefront\").shape == self.phase_array.shape required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"__call__()"},{"location":"user_documentation/layers/apply_opd/#dLux.layers.ApplyOPD.__init__","text":"Parameters: Name Type Description Default opd_array float , meters The per pixel optical path differences. required","title":"__init__()"},{"location":"user_documentation/layers/circular_aperture/","text":"Bases: eqx . Module Multiplies the input wavefront by a pre calculated circular binary (float) mask that fills the size of the array Notes There is a known bug where gradients become nan if phase operation are applied after this layer Attributes: Name Type Description npix int The number of pixels along one side of the aperture. This parameters is not differentiable. array Array [ float ] A binary float array describing the apertures location. The parameter is differentiable but refers to Notes for a known bug. array = self . create_aperture ( self . npix , rmin = rmin , rmax = rmax ) + eps instance-attribute npix = int ( npix ) instance-attribute __call__ ( params_dict ) Apply the apperture to the wavefront. Note that the name CircluarApperture is a misnomer since because this Module can also represent annular openings. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated. __init__ ( npix , rmin = 0.0 , rmax = 1.0 , eps = 1e-08 ) Parameters: Name Type Description Default npix int The number of pixels along one side of the apperture when represented as an array. required rmin float The inner radius of the Annular aperture. Note that the description Circular is a misnomer. Additionally notice that this parameter must satisfy the condition 0 <= rmin < rmax 0.0 rmax float The outer radius of the Anular apperture. Note that this must satisfy the condition. rmin < rmax <= 1. 1.0 eps float A small constant that is added to the binary aperture array to stablize autodiff. This parameter should not be changed very often. 1e-08 create_aperture ( npix , rmin , rmax ) Produces the aperture array from the parameters; rmin , rmax and npix . Parameters: Name Type Description Default npix int The number of pixels along the side of the array that is used to represent the aperture. required rmin float The inner radius of the annular opening. This is a unitless quantity that must satisfy the following condition: 0 <= rmin < rmax required rmax float The outer radius of the annular opening. This is a unitless quantity and must satisfy the condition: rmin < rmax <= 1. required","title":"Circular aperture"},{"location":"user_documentation/layers/circular_aperture/#dLux.layers.CircularAperture--notes","text":"There is a known bug where gradients become nan if phase operation are applied after this layer Attributes: Name Type Description npix int The number of pixels along one side of the aperture. This parameters is not differentiable. array Array [ float ] A binary float array describing the apertures location. The parameter is differentiable but refers to Notes for a known bug.","title":"Notes"},{"location":"user_documentation/layers/circular_aperture/#dLux.layers.CircularAperture.array","text":"","title":"array"},{"location":"user_documentation/layers/circular_aperture/#dLux.layers.CircularAperture.npix","text":"","title":"npix"},{"location":"user_documentation/layers/circular_aperture/#dLux.layers.CircularAperture.__call__","text":"Apply the apperture to the wavefront. Note that the name CircluarApperture is a misnomer since because this Module can also represent annular openings. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"__call__()"},{"location":"user_documentation/layers/circular_aperture/#dLux.layers.CircularAperture.__init__","text":"Parameters: Name Type Description Default npix int The number of pixels along one side of the apperture when represented as an array. required rmin float The inner radius of the Annular aperture. Note that the description Circular is a misnomer. Additionally notice that this parameter must satisfy the condition 0 <= rmin < rmax 0.0 rmax float The outer radius of the Anular apperture. Note that this must satisfy the condition. rmin < rmax <= 1. 1.0 eps float A small constant that is added to the binary aperture array to stablize autodiff. This parameter should not be changed very often. 1e-08","title":"__init__()"},{"location":"user_documentation/layers/circular_aperture/#dLux.layers.CircularAperture.create_aperture","text":"Produces the aperture array from the parameters; rmin , rmax and npix . Parameters: Name Type Description Default npix int The number of pixels along the side of the array that is used to represent the aperture. required rmin float The inner radius of the annular opening. This is a unitless quantity that must satisfy the following condition: 0 <= rmin < rmax required rmax float The outer radius of the annular opening. This is a unitless quantity and must satisfy the condition: rmin < rmax <= 1. required","title":"create_aperture()"},{"location":"user_documentation/layers/create_wavefront/","text":"Bases: eqx . Module Initialises an on-axis input wavefront Parameters: Name Type Description Default npix int The number of pixels along one side that represent the wavefront. required pixel_scale The pixelscae of each array between each layer operation Its value is automatically calculated from the input values required wavefront_size Width of the array representing the wavefront in physical units required npix = int ( npix ) instance-attribute pixel_scale = np . array ( wavefront_size / npix ) . astype ( float ) instance-attribute wavefront_size = np . array ( wavefront_size ) . astype ( float ) instance-attribute __call__ ( params_dict ) Creates a safe wavefront by populating the amplitude and phase arrays as well as the pixel_scale. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated. __init__ ( npix , wavefront_size ) Parameters: Name Type Description Default npix int The number of pixels along one edge of the wavefront. required wavefront_size float , meters The physical dimensions of the wavefront in units of (radians) meters. required","title":"Create Wavefront"},{"location":"user_documentation/layers/create_wavefront/#dLux.layers.CreateWavefront.npix","text":"","title":"npix"},{"location":"user_documentation/layers/create_wavefront/#dLux.layers.CreateWavefront.pixel_scale","text":"","title":"pixel_scale"},{"location":"user_documentation/layers/create_wavefront/#dLux.layers.CreateWavefront.wavefront_size","text":"","title":"wavefront_size"},{"location":"user_documentation/layers/create_wavefront/#dLux.layers.CreateWavefront.__call__","text":"Creates a safe wavefront by populating the amplitude and phase arrays as well as the pixel_scale. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"__call__()"},{"location":"user_documentation/layers/create_wavefront/#dLux.layers.CreateWavefront.__init__","text":"Parameters: Name Type Description Default npix int The number of pixels along one edge of the wavefront. required wavefront_size float , meters The physical dimensions of the wavefront in units of (radians) meters. required","title":"__init__()"},{"location":"user_documentation/layers/normalise_wavefront/","text":"Bases: eqx . Module Normalises the input wavefront using the in-built normalisation algorithm of the wavefront. __call__ ( params_dict ) Normalise the wavefront. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"Normalise Wavefront"},{"location":"user_documentation/layers/normalise_wavefront/#dLux.layers.NormaliseWavefront.__call__","text":"Normalise the wavefront. Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"__call__()"},{"location":"user_documentation/layers/tilt_wavefront/","text":"Bases: eqx . Module Applies a paraxial tilt by adding a phase slope __call__ ( params_dict ) Applies a tilt to the phase of the wavefront according to the offset that is stored in the Wavefront . Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"Tilt Wavefront"},{"location":"user_documentation/layers/tilt_wavefront/#dLux.layers.TiltWavefront.__call__","text":"Applies a tilt to the phase of the wavefront according to the offset that is stored in the Wavefront . Parameters: Name Type Description Default params_dict dict A dictionary of the parameters. The following condition must be satisfied: params_dict.get(\"Wavefront\") != None required Returns: Name Type Description params_dict dict The params_dict parameter with the Wavefront entry updated.","title":"__call__()"}]}